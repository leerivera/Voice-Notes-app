{"ast":null,"code":"var _jsxFileName = \"/home/leer/VBOX/reactpoc/src/components/stateful/NoteForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport Input from '../stateless/Input';\nimport { Button } from '../stateless/Button';\nimport TextArea from '../stateless/TextArea';\nimport Flash from '../stateless/Flash';\nimport { ButtonIcon } from '../stateless/ButtonIcon';\n\nconst NoteForm = ({\n  onSave,\n  preTitle,\n  preContent,\n  ctaLabel,\n  noteId,\n  ...props\n}) => {\n  const {\n    transcript,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [title, setTitle] = useState(preTitle || '');\n  const [content, setContent] = useState(preContent || '');\n  const [message, setMessage] = useState('');\n  const [mode, setMode] = useState(0);\n  useEffect(() => {\n    setContent(transcript);\n  }, [transcript]);\n\n  const toggleRecording = evt => {\n    let requestedMode = !mode;\n    setMode(requestedMode);\n\n    if (requestedMode) {\n      SpeechRecognition.startListening();\n    } else {\n      SpeechRecognition.stopListening();\n    }\n  };\n\n  const handleSubmit = evt => {\n    setMessage('');\n    evt.preventDefault();\n    let err = '';\n    if (!title) err = 'Title is required';else if (!content) err = 'Content is required';\n    if (err) return setMessage(err);\n    const objNote = {\n      title,\n      content\n    };\n    if (noteId) objNote.id = noteId;\n    onSave(objNote);\n    setTitle('');\n    setContent('');\n    resetTranscript();\n  };\n\n  console.log(props);\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"w-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, message && /*#__PURE__*/React.createElement(Flash, {\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    placeholder: 'Enter Title',\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"relative my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Take a note\",\n    value: content,\n    onChange: e => setContent(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ButtonIcon, {\n    onClick: toggleRecording,\n    icon: mode ? 'mic' : 'mic_off',\n    className: 'absolute top-0 right-0 m-1',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: ctaLabel || 'Save',\n    type: 'submit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default NoteForm;","map":{"version":3,"sources":["/home/leer/VBOX/reactpoc/src/components/stateful/NoteForm.js"],"names":["React","useState","useEffect","SpeechRecognition","useSpeechRecognition","Input","Button","TextArea","Flash","ButtonIcon","NoteForm","onSave","preTitle","preContent","ctaLabel","noteId","props","transcript","resetTranscript","title","setTitle","content","setContent","message","setMessage","mode","setMode","toggleRecording","evt","requestedMode","startListening","stopListening","handleSubmit","preventDefault","err","objNote","id","console","log","browserSupportsSpeechRecognition","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\n\nimport Input from '../stateless/Input'\nimport { Button } from '../stateless/Button'\nimport TextArea from '../stateless/TextArea'\nimport Flash from '../stateless/Flash'\nimport { ButtonIcon } from '../stateless/ButtonIcon'\n\nconst NoteForm = ({ onSave, preTitle, preContent, ctaLabel, noteId, ...props }) => {\n  const { transcript, resetTranscript } = useSpeechRecognition()\n\n  const [title, setTitle] = useState(preTitle || '')\n  const [content, setContent] = useState(preContent || '')\n  const [message, setMessage] = useState('')\n  const [mode, setMode] = useState(0)\n\n  useEffect(() => {\n    setContent(transcript)\n  }, [transcript])\n\n  const toggleRecording = (evt) => {\n    let requestedMode = !mode\n    setMode(requestedMode)\n    if (requestedMode) {\n      SpeechRecognition.startListening()\n    } else {\n      SpeechRecognition.stopListening()\n    }\n  }\n\n  const handleSubmit = (evt) => {\n    setMessage('')\n    evt.preventDefault()\n    let err = ''\n    if (!title) err = 'Title is required'\n    else if (!content) err = 'Content is required'\n    if (err) return setMessage(err)\n    const objNote = { title, content }\n    if (noteId) objNote.id = noteId\n    onSave(objNote)\n    setTitle('')\n    setContent('')\n    resetTranscript()\n  }\n\n  console.log(props)\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"w-full\">\n      {message && <Flash message={message} />}\n      <Input placeholder={'Enter Title'} value={title} onChange={(e) => setTitle(e.target.value)} />\n      <div className=\"relative my-1\">\n        <TextArea placeholder=\"Take a note\" value={content} onChange={(e) => setContent(e.target.value)} />\n\n        <ButtonIcon onClick={toggleRecording} icon={mode ? 'mic' : 'mic_off'} className={'absolute top-0 right-0 m-1'} />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <Button text={ctaLabel || 'Save'} type={'submit'} />\n      </div>\n    </form>\n  )\n}\n\nexport default NoteForm\n"]},"metadata":{},"sourceType":"module"}