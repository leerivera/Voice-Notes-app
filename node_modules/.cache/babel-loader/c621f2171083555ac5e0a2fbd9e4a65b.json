{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport axios from 'axios';\nimport { API_BASE } from '../../config';\nconst NOTE_FETCH_PENDING = 'NOTE_FETCH_PENDING';\nconst NOTE_FETCH_SUCCESS = 'NOTE_FETCH_SUCCESS';\nconst NOTE_FETCH_ERROR = 'NOTE_FETCH_ERROR';\nconst NOTE_ADD_PENDING = 'NOTE_ADD_PENDING';\nconst NOTE_ADD_SUCCESS = 'NOTE_ADD_SUCCESS';\nconst NOTE_ADD_ERROR = 'NOTE_ADD_ERROR';\nconst NOTE_REMOVE_PENDING = 'NOTE_REMOVE_PENDING';\nconst NOTE_REMOVE_SUCCESS = 'NOTE_REMOVE_SUCCESS';\nconst NOTE_REMOVE_ERROR = 'NOTE_REMOVE_ERROR';\nconst NOTE_DETAIL_PENDING = 'NOTE_DETAIL_PENDING';\nconst NOTE_DETAIL_SUCCESS = 'NOTE_DETAIL_SUCCESS';\nconst NOTE_DETAIL_ERROR = 'NOTE_DETAIL_ERROR';\nconst NOTE_UPDATE_PENDING = 'NOTE_UPDATE_PENDING';\nconst NOTE_UPDATE_SUCCESS = 'NOTE_UPDATE_SUCCESS';\nconst NOTE_UPDATE_ERROR = 'NOTE_UPDATE_ERROR';\nconst noteUpdatePending = createAction(NOTE_UPDATE_PENDING);\nconst noteUpdateError = createAction(NOTE_UPDATE_ERROR);\nconst noteUpdateSuccess = createAction(NOTE_UPDATE_SUCCESS);\nconst noteRemovePending = createAction(NOTE_REMOVE_PENDING);\nconst noteRemoveError = createAction(NOTE_REMOVE_ERROR);\nconst noteRemoveSuccess = createAction(NOTE_REMOVE_SUCCESS);\nconst noteFetchPending = createAction(NOTE_FETCH_PENDING);\nconst noteFetchError = createAction(NOTE_FETCH_ERROR);\nconst noteFetchSuccess = createAction(NOTE_FETCH_SUCCESS);\nconst noteAddPending = createAction(NOTE_ADD_PENDING);\nconst noteAddError = createAction(NOTE_ADD_ERROR);\nconst noteAddSuccess = createAction(NOTE_ADD_SUCCESS);\nconst noteDetailPending = createAction(NOTE_DETAIL_PENDING);\nconst noteDetailError = createAction(NOTE_DETAIL_ERROR);\nconst noteDetailSuccess = createAction(NOTE_DETAIL_SUCCESS);\nexport const removeNote = noteId => {\n  return async dispatch => {\n    dispatch(noteRemovePending());\n\n    try {\n      const res = await axios.delete(API_BASE + '/notes/' + noteId);\n      dispatch(noteRemoveSuccess(res.data));\n      dispatch(fetchNotes());\n      return Promise.resolve(res.data);\n    } catch (err) {\n      dispatch(noteRemoveError(err));\n      return Promise.reject(err);\n    }\n  };\n};\nexport const addNote = note => {\n  return async dispatch => {\n    dispatch(noteAddPending());\n\n    try {\n      const res = await axios.post(API_BASE + '/notes', note);\n      dispatch(noteAddSuccess(res.data));\n      return Promise.resolve(res.data);\n    } catch (err) {\n      dispatch(noteAddError(err));\n      return Promise.reject(err);\n    }\n  };\n};\nexport const updateNote = note => {\n  return async dispatch => {\n    dispatch(noteUpdatePending());\n\n    try {\n      const res = await axios.put(API_BASE + '/notes/' + note.id, note);\n      dispatch(noteUpdateSuccess(res.data));\n      return Promise.resolve(res.data);\n    } catch (err) {\n      dispatch(noteUpdateError(err));\n      return Promise.reject(err);\n    }\n  };\n};\nexport const fetchNotes = () => {\n  return async dispatch => {\n    dispatch(noteFetchPending());\n\n    try {\n      const res = await axios.get(API_BASE + '/notes');\n      dispatch(noteFetchSuccess(res.data));\n      return Promise.resolve(res.data);\n    } catch (err) {\n      dispatch(noteFetchError(err));\n      return Promise.reject(err);\n    }\n  };\n};\nexport const fetchNoteDetail = noteId => {\n  return async dispatch => {\n    dispatch(noteDetailPending());\n\n    try {\n      const res = await axios.get(API_BASE + '/notes/' + noteId);\n      dispatch(noteDetailSuccess(res.data));\n      return Promise.resolve(res.data);\n    } catch (err) {\n      dispatch(noteDetailError(err));\n      return Promise.reject(err);\n    }\n  };\n};\nconst initialFlags = {\n  removing: false,\n  removed: false,\n  created: false,\n  creating: false,\n  updated: false,\n  updating: false,\n  fetching: false\n};\nconst initialState = { ...initialFlags,\n  list: null,\n  active: null\n};\nconst reducer = handleActions({\n  [NOTE_FETCH_PENDING]: state => ({ ...state,\n    ...initialFlags,\n    fetching: true\n  }),\n  [NOTE_ADD_PENDING]: state => ({ ...state,\n    creating: true,\n    created: false\n  }),\n  [NOTE_UPDATE_PENDING]: state => ({ ...state,\n    updating: true,\n    updated: false\n  }),\n  [NOTE_REMOVE_PENDING]: state => ({ ...state,\n    removing: true,\n    removed: false\n  }),\n  [NOTE_DETAIL_PENDING]: state => ({ ...state,\n    active: null\n  }),\n  [NOTE_ADD_SUCCESS]: state => ({ ...state,\n    creating: false,\n    created: true\n  }),\n  [NOTE_UPDATE_SUCCESS]: state => ({ ...state,\n    updating: false,\n    updated: true\n  }),\n  [NOTE_REMOVE_SUCCESS]: state => ({ ...state,\n    removing: false,\n    removed: true\n  }),\n  [NOTE_FETCH_SUCCESS]: (state, {\n    payload\n  }) => ({ ...state,\n    fetching: false,\n    list: payload && payload.reverse()\n  }),\n  [NOTE_DETAIL_SUCCESS]: (state, {\n    payload\n  }) => ({ ...state,\n    active: payload\n  }),\n  [NOTE_FETCH_ERROR]: (state, {\n    payload\n  }) => ({ ...state,\n    error: {\n      op: 'read',\n      stack: payload\n    }\n  }),\n  [NOTE_UPDATE_ERROR]: (state, {\n    payload\n  }) => ({ ...state,\n    error: {\n      op: 'update',\n      stack: payload\n    }\n  }),\n  [NOTE_REMOVE_ERROR]: (state, {\n    payload\n  }) => ({ ...state,\n    error: {\n      op: 'delete',\n      stack: payload\n    }\n  }),\n  [NOTE_ADD_ERROR]: (state, {\n    payload\n  }) => ({ ...state,\n    error: {\n      op: 'create',\n      stack: payload\n    }\n  }),\n  [NOTE_DETAIL_ERROR]: (state, {\n    payload\n  }) => ({ ...state,\n    error: {\n      op: 'detail',\n      stack: payload\n    }\n  })\n}, initialState);\nexport default reducer;","map":{"version":3,"sources":["/home/leer/VBOX/reactpoc/src/redux/ducks/notes.js"],"names":["createAction","handleActions","axios","API_BASE","NOTE_FETCH_PENDING","NOTE_FETCH_SUCCESS","NOTE_FETCH_ERROR","NOTE_ADD_PENDING","NOTE_ADD_SUCCESS","NOTE_ADD_ERROR","NOTE_REMOVE_PENDING","NOTE_REMOVE_SUCCESS","NOTE_REMOVE_ERROR","NOTE_DETAIL_PENDING","NOTE_DETAIL_SUCCESS","NOTE_DETAIL_ERROR","NOTE_UPDATE_PENDING","NOTE_UPDATE_SUCCESS","NOTE_UPDATE_ERROR","noteUpdatePending","noteUpdateError","noteUpdateSuccess","noteRemovePending","noteRemoveError","noteRemoveSuccess","noteFetchPending","noteFetchError","noteFetchSuccess","noteAddPending","noteAddError","noteAddSuccess","noteDetailPending","noteDetailError","noteDetailSuccess","removeNote","noteId","dispatch","res","delete","data","fetchNotes","Promise","resolve","err","reject","addNote","note","post","updateNote","put","id","get","fetchNoteDetail","initialFlags","removing","removed","created","creating","updated","updating","fetching","initialState","list","active","reducer","state","payload","reverse","error","op","stack"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions'\nimport axios from 'axios'\n\nimport { API_BASE } from '../../config'\n\nconst NOTE_FETCH_PENDING = 'NOTE_FETCH_PENDING'\nconst NOTE_FETCH_SUCCESS = 'NOTE_FETCH_SUCCESS'\nconst NOTE_FETCH_ERROR = 'NOTE_FETCH_ERROR'\n\nconst NOTE_ADD_PENDING = 'NOTE_ADD_PENDING'\nconst NOTE_ADD_SUCCESS = 'NOTE_ADD_SUCCESS'\nconst NOTE_ADD_ERROR = 'NOTE_ADD_ERROR'\n\nconst NOTE_REMOVE_PENDING = 'NOTE_REMOVE_PENDING'\nconst NOTE_REMOVE_SUCCESS = 'NOTE_REMOVE_SUCCESS'\nconst NOTE_REMOVE_ERROR = 'NOTE_REMOVE_ERROR'\n\nconst NOTE_DETAIL_PENDING = 'NOTE_DETAIL_PENDING'\nconst NOTE_DETAIL_SUCCESS = 'NOTE_DETAIL_SUCCESS'\nconst NOTE_DETAIL_ERROR = 'NOTE_DETAIL_ERROR'\n\nconst NOTE_UPDATE_PENDING = 'NOTE_UPDATE_PENDING'\nconst NOTE_UPDATE_SUCCESS = 'NOTE_UPDATE_SUCCESS'\nconst NOTE_UPDATE_ERROR = 'NOTE_UPDATE_ERROR'\n\nconst noteUpdatePending = createAction(NOTE_UPDATE_PENDING)\nconst noteUpdateError = createAction(NOTE_UPDATE_ERROR)\nconst noteUpdateSuccess = createAction(NOTE_UPDATE_SUCCESS)\n\nconst noteRemovePending = createAction(NOTE_REMOVE_PENDING)\nconst noteRemoveError = createAction(NOTE_REMOVE_ERROR)\nconst noteRemoveSuccess = createAction(NOTE_REMOVE_SUCCESS)\n\nconst noteFetchPending = createAction(NOTE_FETCH_PENDING)\nconst noteFetchError = createAction(NOTE_FETCH_ERROR)\nconst noteFetchSuccess = createAction(NOTE_FETCH_SUCCESS)\n\nconst noteAddPending = createAction(NOTE_ADD_PENDING)\nconst noteAddError = createAction(NOTE_ADD_ERROR)\nconst noteAddSuccess = createAction(NOTE_ADD_SUCCESS)\n\nconst noteDetailPending = createAction(NOTE_DETAIL_PENDING)\nconst noteDetailError = createAction(NOTE_DETAIL_ERROR)\nconst noteDetailSuccess = createAction(NOTE_DETAIL_SUCCESS)\n\nexport const removeNote = (noteId) => {\n  return async (dispatch) => {\n    dispatch(noteRemovePending())\n\n    try {\n      const res = await axios.delete(API_BASE + '/notes/' + noteId)\n      dispatch(noteRemoveSuccess(res.data))\n      dispatch(fetchNotes())\n      return Promise.resolve(res.data)\n    } catch (err) {\n      dispatch(noteRemoveError(err))\n      return Promise.reject(err)\n    }\n  }\n}\n\nexport const addNote = (note) => {\n  return async (dispatch) => {\n    dispatch(noteAddPending())\n\n    try {\n      const res = await axios.post(API_BASE + '/notes', note)\n      dispatch(noteAddSuccess(res.data))\n\n      return Promise.resolve(res.data)\n    } catch (err) {\n      dispatch(noteAddError(err))\n      return Promise.reject(err)\n    }\n  }\n}\n\nexport const updateNote = (note) => {\n  return async (dispatch) => {\n    dispatch(noteUpdatePending())\n\n    try {\n      const res = await axios.put(API_BASE + '/notes/' + note.id, note)\n      dispatch(noteUpdateSuccess(res.data))\n\n      return Promise.resolve(res.data)\n    } catch (err) {\n      dispatch(noteUpdateError(err))\n      return Promise.reject(err)\n    }\n  }\n}\n\nexport const fetchNotes = () => {\n  return async (dispatch) => {\n    dispatch(noteFetchPending())\n\n    try {\n      const res = await axios.get(API_BASE + '/notes')\n      dispatch(noteFetchSuccess(res.data))\n      return Promise.resolve(res.data)\n    } catch (err) {\n      dispatch(noteFetchError(err))\n      return Promise.reject(err)\n    }\n  }\n}\n\nexport const fetchNoteDetail = (noteId) => {\n  return async (dispatch) => {\n    dispatch(noteDetailPending())\n\n    try {\n      const res = await axios.get(API_BASE + '/notes/' + noteId)\n      dispatch(noteDetailSuccess(res.data))\n      return Promise.resolve(res.data)\n    } catch (err) {\n      dispatch(noteDetailError(err))\n      return Promise.reject(err)\n    }\n  }\n}\n\nconst initialFlags = {\n  removing: false,\n  removed: false,\n  created: false,\n  creating: false,\n  updated: false,\n  updating: false,\n  fetching: false\n}\n\nconst initialState = {\n  ...initialFlags,\n  list: null,\n  active: null\n}\n\nconst reducer = handleActions(\n  {\n    [NOTE_FETCH_PENDING]: (state) => ({ ...state, ...initialFlags, fetching: true }),\n    [NOTE_ADD_PENDING]: (state) => ({ ...state, creating: true, created: false }),\n    [NOTE_UPDATE_PENDING]: (state) => ({ ...state, updating: true, updated: false }),\n    [NOTE_REMOVE_PENDING]: (state) => ({ ...state, removing: true, removed: false }),\n    [NOTE_DETAIL_PENDING]: (state) => ({ ...state, active: null }),\n\n    [NOTE_ADD_SUCCESS]: (state) => ({ ...state, creating: false, created: true }),\n    [NOTE_UPDATE_SUCCESS]: (state) => ({ ...state, updating: false, updated: true }),\n    [NOTE_REMOVE_SUCCESS]: (state) => ({ ...state, removing: false, removed: true }),\n    [NOTE_FETCH_SUCCESS]: (state, { payload }) => ({ ...state, fetching: false, list: payload && payload.reverse() }),\n    [NOTE_DETAIL_SUCCESS]: (state, { payload }) => ({ ...state, active: payload }),\n\n    [NOTE_FETCH_ERROR]: (state, { payload }) => ({ ...state, error: { op: 'read', stack: payload } }),\n    [NOTE_UPDATE_ERROR]: (state, { payload }) => ({ ...state, error: { op: 'update', stack: payload } }),\n    [NOTE_REMOVE_ERROR]: (state, { payload }) => ({ ...state, error: { op: 'delete', stack: payload } }),\n    [NOTE_ADD_ERROR]: (state, { payload }) => ({ ...state, error: { op: 'create', stack: payload } }),\n    [NOTE_DETAIL_ERROR]: (state, { payload }) => ({ ...state, error: { op: 'detail', stack: payload } })\n  },\n  initialState\n)\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}